version: '3.8'

services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER}']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: .
      dockerfile: packages/api/Dockerfile
      target: development
    volumes:
      - ./packages/api:/app/packages/api
      - ./packages/shared:/app/packages/shared
      - /app/packages/api/node_modules
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=development
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - REDIS_URL=${REDIS_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  bot:
    build:
      context: .
      dockerfile: packages/bot/Dockerfile
      target: development
    volumes:
      - ./packages/bot:/app/packages/bot
      - ./packages/shared:/app/packages/shared
      - /app/packages/bot/node_modules
    environment:
      - NODE_ENV=development
      - DISCORD_BOT_TOKEN=${DISCORD_BOT_TOKEN}
      - DISCORD_CLIENT_ID=${DISCORD_CLIENT_ID}
      - DISCORD_CLIENT_SECRET=${DISCORD_CLIENT_SECRET}
    depends_on:
      - api

  web:
    build:
      context: .
      dockerfile: packages/web/Dockerfile
      target: development
    volumes:
      - ./packages/web:/app/packages/web
      - ./packages/shared:/app/packages/shared
      - /app/packages/web/node_modules
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=development
    depends_on:
      - api

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - '9090:9090'
    depends_on:
      - api

  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./monitoring/grafana:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    ports:
      - '3002:3000'
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
